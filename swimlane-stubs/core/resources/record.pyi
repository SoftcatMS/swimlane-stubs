from typing import Any, Dict, Optional

from pendulum.datetime import DateTime
from swimlane.core.adapters.record_revision import RecordRevisionAdapter
from swimlane.core.resources.app import App
from swimlane.core.resources.base import APIResource as APIResource
from swimlane.core.resources.usergroup import Group as Group
from swimlane.core.resources.usergroup import User as User
from swimlane.core.resources.usergroup import UserGroup as UserGroup
from swimlane.exceptions import SwimlaneException as SwimlaneException
from swimlane.exceptions import UnknownField as UnknownField
from swimlane.exceptions import ValidationError as ValidationError

class Record(APIResource):
    is_new: bool
    id: str
    tracking_id: str
    created: DateTime
    modified: DateTime
    locked: bool
    locking_user: Optional[User]
    locked_date: Optional[DateTime]
    revisions: RecordRevisionAdapter
    _raw: Dict[str, Any]

    def __init__(self, app: App, raw: Dict[str, Any]) -> None: ...
    @property
    def app(self): ...
    def __setitem__(self, field_name: str, value: Any) -> None: ...
    def __getitem__(self, field_name: str): ...
    def __delitem__(self, field_name: str) -> None: ...
    def __iter__(self): ...
    def __hash__(self): ...
    def __lt__(self, other): ...
    def get_cache_index_keys(self): ...
    def get_field(self, field_name: str): ...
    def validate(self) -> None: ...
    def save(self) -> None: ...
    def patch(self) -> None: ...
    def delete(self) -> None: ...
    def for_json(self, *field_names: str) -> Dict[str, Any]: ...
    @property
    def restrictions(self): ...
    def add_restriction(self, *usergroups: UserGroup) -> None: ...
    def remove_restriction(self, *usergroups: UserGroup) -> None: ...
    def lock(self) -> None: ...
    def unlock(self) -> None: ...
    def execute_task(self, task_name: str, timeout: int = ...) -> None: ...

def record_factory(app: App, fields: Optional[Dict[str, Any]] = ...): ...
